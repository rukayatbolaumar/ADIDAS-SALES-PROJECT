# -*- coding: utf-8 -*-
"""ADIDAS SALES PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uZg0W4XTusDYNOMWctTRKOgIMhOPkGs8
"""

import pandas as pd
import seaborn as sb
import numpy as np
import matplotlib.pyplot as plt

rawdf = pd.read_csv('/content/drive/MyDrive/DATA /Adidas US Sales Datasets.csv')

rawdf.head(10)

rawdf.info()

# convert to date
rawdf['Invoice Date'] = pd.to_datetime(rawdf['Invoice Date'], dayfirst = True)
 # verify datatype
type(rawdf['Invoice Date'][0])

''' filter raw data to have only data for 2021'''
df21 = rawdf.loc[(rawdf['Invoice Date'] >= '01-01-2021') & (rawdf['Invoice Date'] < '01-01-2022'), :]
df21 = df21.reset_index()
df21.drop(['index'], axis= 1, inplace=True)
df21.head(-10)

df21.info()

# replace values only in selected columns
df21[['Price per Unit','Total Sales','Operating Profit']] = df21[['Price per Unit','Total Sales','Operating Profit']].replace('[\$,]', '', regex=True).astype(float)
df21.info()
df21.head(-10)

# replace values in all columns
#df = df.replace('[\$,]', '', regex=True).astype(float)

#changed units sold to integer
df21[['Units Sold']] = df21[['Units Sold']].replace('[\$,]', '', regex=True).astype(int)
df21.info()

df21['Operating Margin'] = df21['Operating Margin'].str.rstrip('%').astype('float') / 100.0
#                                                    ^ use str funcs to elim '%'     ^ divide by 100
# could also be:     .str[:-1].astype(.... but in case there is no % at the back it will remove the last xter, so we'll avoid this method here.

df21.head(-10)

df21.describe()

salestrend = df21.sort_values(by='Invoice Date', inplace= False)
plt.figure(figsize=(15, 6))
sb.lineplot(data=salestrend, x='Invoice Date', y='Total Sales')

plt.title('Sales Trend In the Year 2021')
plt.xlabel('DATE')
plt.ylabel('TOTAL SALES')
plt.yticks(rotation=45)
#plt.tight_layout()
plt.show()

''' OVERVIEW OF SALES PERFORMANCE IN YEAR 2021 '''
# Sort the DataFrame by 'ORDERDATE' in ascending order
salestrend = df21.sort_values(by='Invoice Date', inplace= False)
stplot = salestrend.groupby(salestrend['Invoice Date'].dt.month)['Total Sales'].sum()
stplot= stplot.reset_index(name = 'Total Sales')

''' OVERVIEW OF SALES PERFORMANCE IN YEAR 2021 '''
# Sort the DataFrame by 'ORDERDATE' in ascending order
plt.figure(figsize=(15, 6))
sb.lineplot(data=stplot, x='Invoice Date', y='Total Sales', marker = '*', markerfacecolor='limegreen', markersize=20)
plt.title('Sales Trend BY MONTH In the Year 2021')
plt.xlabel('MONTHS')
plt.ylabel('TOTAL SALES')
plt.yticks(rotation=45)
plt.tight_layout()
plt.show()

#volume sales vs price
plt.figure(figsize=(10, 6))
plt.scatter(salestrend['Price per Unit'], salestrend['Units Sold'])
plt.xlabel('PRICE OF PRODUCT')
plt.ylabel('QUANTITY SOLD')
plt.title('CORRELATION BETWEEN PRICE AND NUMBER OF PRODUCTS SOLD')
plt.grid(True)
plt.show()

#unit sold  by product and region
overview = salestrend.groupby(['Retailer','Product']).agg({'Operating Margin':'mean', 'Units Sold':'mean'})
overview

plt.figure(figsize=(15, 5))
sb.barplot(x="Retailer", y="Operating Margin", hue="Product", palette="Set1", ci=None,data=overview)
plt.xlabel("Retailer")
plt.ylabel("Average Operating Margin")
plt.title("AVERAGE OPERATING MARGIN BY RETAILER and PRODUCT")
plt.legend(title='Products', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

#OPERATING PROFIT BY STATE

plt.figure(figsize=(12, 6))
sb.barplot(x='State', y='Operating Profit', data=salestrend, errorbar= None)
plt.title('OPERATING PROFIT PER STATE')
plt.xlabel('RETAILER')
plt.ylabel('OPERATING PROFIT')
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability
plt.tight_layout()
plt.show()

#BarPlot product by units sold
Unitbar = salestrend.groupby(['Product'])['Units Sold'].sum()
Unitbar= Unitbar.reset_index(name = 'Total Units Sold')
Unitbar = Unitbar.sort_values(by = 'Total Units Sold', ascending = False)

fig = plt.figure(figsize=(8, 5))
myexplode = [0.2, 0, 0, 0,0,0.2] # Each value represents how far from the center each wedge is displayed:
plt.pie(Unitbar['Total Units Sold'], labels =Unitbar['Product'] ,autopct='%1.1f%%',explode = myexplode, shadow = True, startangle = 90,
        wedgeprops= {"edgecolor":"black",
                     'linewidth': 1,
                     'antialiased': True})
plt.title('PRODUCTS BY UNITS SOLD')
plt.legend(title='Products', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

plt.figure(figsize=(8, 6))
sb.histplot(data=salestrend, x='Region', hue='Sales Method', palette='CMRmap')
plt.title('DISTRIBUTION OF SALES IN THE REGION SHOWING THE SALES METHOD')
plt.xlabel('Region')
plt.ylabel('Frequency')
plt.show()